version: '2.1'

services:
  db:
    container_name: db
    image: postgres:12.0-alpine
    restart: always
    networks:
      - backend_nw
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - 5432:5432

  analyzer:
    container_name: analyzer
    image: michailgg/analyzer:latest
    environment:
      DB_HOST: ${DB_HOST:-localhost}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
    build:
      dockerfile: analyzer/Dockerfile
      context: .
    depends_on:
      - db
      - rabbitmq-stomp
    network_mode: host
    volumes:
      - ${PROJECT_DIR}:/opt/

  rabbitmq-stomp:
    container_name: rabbitmq
    image: michailgg/rabbitmq-stomp:latest
    build:
      dockerfile: rabbitmq-stomp/Dockerfile
      context: .
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-root}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-P@ssword}
    volumes:
      - rabbitmq_data:/data
    ports:
      - 15674:15674
      - 15672:15672
      - 5672:5672
    networks:
      - backend_nw

#  api:
#    container_name: api
#    image: michailgg/snortruleapi:latest
#    build:
#      dockerfile: api/Dockerfile
#      context: .
#    environment:
#      DB_HOST: ${DB_HOST:-localhost}
#      DB_USER: ${DB_USER}
#      DB_PASS: ${DB_PASS}
#    depends_on:
#      - db
#      - rabbitmq-stomp
#    networks:
#      - backend_nw
#      - frontend_nw
#    volumes:
#      - ${PROJECT_DIR}:/opt/


networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
